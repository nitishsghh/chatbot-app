{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nitis\\\\Desktop\\\\chatbot\\\\chatbot-app\\\\client\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport SendIcon from '@mui/icons-material/Send';\nimport ImageIcon from '@mui/icons-material/Image';\nimport TranslateIcon from '@mui/icons-material/Translate';\nimport AudiotrackIcon from '@mui/icons-material/Audiotrack';\nimport AttachFileIcon from '@mui/icons-material/AttachFile';\nimport ChatIcon from '@mui/icons-material/Chat';\nimport MicIcon from '@mui/icons-material/Mic';\nimport StopIcon from '@mui/icons-material/Stop';\nimport VolumeUpIcon from '@mui/icons-material/VolumeUp';\nimport VolumeOffIcon from '@mui/icons-material/VolumeOff';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport AddIcon from '@mui/icons-material/Add';\nimport { startListening, stopListening, speakText, stopSpeaking } from '../services/aiService';\nimport Settings from './Settings';\nimport ChatHistory from './ChatHistory';\nimport Navbar from './Navbar';\nimport { loanMessages } from '../data/loanMessages';\nimport './ChatBot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst defaultAvatar = 'https://ui-avatars.com/api/?background=random';\nfunction ChatBot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [chatHistory, setChatHistory] = useState(loanMessages);\n  const [activeChat, setActiveChat] = useState(null);\n  const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [settings, setSettings] = useState({\n    darkMode: false,\n    language: 'en-US',\n    autoSpeak: false,\n    voiceSpeed: 1,\n    notifications: false\n  });\n  const messagesEndRef = useRef(null);\n\n  // Apply dark mode\n  useEffect(() => {\n    document.body.setAttribute('data-theme', settings.darkMode ? 'dark' : 'light');\n  }, [settings.darkMode]);\n\n  // Request notification permission\n  useEffect(() => {\n    if (settings.notifications && Notification.permission !== 'granted') {\n      Notification.requestPermission();\n    }\n  }, [settings.notifications]);\n  const showNotification = message => {\n    if (settings.notifications && Notification.permission === 'granted' && document.hidden) {\n      new Notification('New Message', {\n        body: message,\n        icon: '/path/to/your/icon.png'\n      });\n    }\n  };\n  const handleSettingChange = (key, value) => {\n    if (key === 'clearHistory') {\n      setChatHistory([]);\n      setMessages([]);\n      setActiveChat(null);\n      return;\n    }\n    setSettings(prev => ({\n      ...prev,\n      [key]: value\n    }));\n\n    // Handle special cases\n    if (key === 'voiceSpeed' && isSpeaking) {\n      stopSpeaking();\n      setIsSpeaking(false);\n    }\n  };\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    socket.on('bot-response', response => {\n      const newMessage = {\n        text: response,\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, newMessage]);\n      if (activeChat) {\n        updateChatHistory(activeChat.id, [...messages, newMessage]);\n      }\n      setIsTyping(false);\n\n      // Auto-speak the response if enabled\n      if (settings.autoSpeak) {\n        speakText(response);\n      }\n      if (settings.notifications && document.hidden) {\n        showNotification(response);\n      }\n    });\n    socket.on('error', error => {\n      console.error('Error:', error);\n      setIsTyping(false);\n    });\n    return () => {\n      socket.off('bot-response');\n      socket.off('error');\n      stopListening();\n      stopSpeaking();\n    };\n  }, [settings.autoSpeak, settings.notifications, messages, activeChat, showNotification]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const updateChatHistory = (chatId, updatedMessages) => {\n    setChatHistory(prev => prev.map(chat => {\n      if (chat.id === chatId) {\n        return {\n          ...chat,\n          messages: updatedMessages,\n          lastMessage: updatedMessages[updatedMessages.length - 1].text\n        };\n      }\n      return chat;\n    }));\n  };\n  const handleNewChat = () => {\n    setActiveChat(null);\n    setMessages([]);\n    setInputMessage('');\n    setIsHistoryOpen(false);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (inputMessage.trim() === '') return;\n    const newMessage = {\n      text: inputMessage,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, newMessage]);\n    if (activeChat) {\n      // Update existing chat\n      const updatedMessages = [...messages, newMessage];\n      updateChatHistory(activeChat.id, updatedMessages);\n    } else {\n      // Create new chat with proper category detection\n      const category = detectCategory(inputMessage);\n      const newChat = {\n        id: Date.now().toString(),\n        title: generateChatTitle(inputMessage),\n        category,\n        messages: [newMessage],\n        timestamp: new Date(),\n        lastMessage: inputMessage\n      };\n      setChatHistory(prev => [newChat, ...prev]);\n      setActiveChat(newChat);\n    }\n    setIsTyping(true);\n    socket.emit('user-message', inputMessage);\n    setInputMessage('');\n  };\n  const detectCategory = message => {\n    const lowerMessage = message.toLowerCase();\n    if (lowerMessage.includes('property') || lowerMessage.includes('land')) return 'property';\n    if (lowerMessage.includes('home') || lowerMessage.includes('house')) return 'home';\n    if (lowerMessage.includes('shop') || lowerMessage.includes('store')) return 'shop';\n    return 'business';\n  };\n  const generateChatTitle = message => {\n    // Generate a meaningful title from the first message\n    const words = message.split(' ');\n    const title = words.slice(0, 5).join(' ');\n    return title.length < message.length ? `${title}...` : title;\n  };\n  const handleChatSelect = chat => {\n    setActiveChat(chat);\n    setMessages(chat.messages);\n    setIsHistoryOpen(false);\n  };\n  const handleDeleteChat = chatId => {\n    setChatHistory(prev => prev.filter(chat => chat.id !== chatId));\n    if ((activeChat === null || activeChat === void 0 ? void 0 : activeChat.id) === chatId) {\n      setActiveChat(null);\n      setMessages([]);\n    }\n  };\n  const handleVoiceInput = () => {\n    if (isListening) {\n      stopListening();\n      setIsListening(false);\n    } else {\n      setIsListening(true);\n      startListening(transcript => {\n        setInputMessage(transcript);\n      }, error => {\n        console.error('Speech recognition error:', error);\n        setIsListening(false);\n      });\n    }\n  };\n  const handleMessageSpeak = text => {\n    if (isSpeaking) {\n      stopSpeaking();\n      setIsSpeaking(false);\n    } else {\n      speakText(text);\n      setIsSpeaking(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      onNewChat: handleNewChat,\n      onToggleHistory: () => setIsHistoryOpen(!isHistoryOpen),\n      onOpenSettings: () => setIsSettingsOpen(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `main-content ${isHistoryOpen ? 'shifted' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages-container\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`,\n          children: [message.text, message.sender === 'bot' && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"speak-button\",\n            onClick: () => handleMessageSpeak(message.text),\n            children: isSpeaking ? /*#__PURE__*/_jsxDEV(StopIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(VolumeUpIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 65\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: \"AI is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"input-form\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"message-input\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          placeholder: \"Type your message here...\",\n          disabled: isTyping\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"voice-button\",\n          onClick: handleVoiceInput,\n          disabled: isTyping,\n          children: isListening ? /*#__PURE__*/_jsxDEV(StopIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 28\n          }, this) : /*#__PURE__*/_jsxDEV(MicIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"send-button\",\n          disabled: !inputMessage.trim() || isTyping,\n          children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), isHistoryOpen && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-overlay\",\n        onClick: () => setIsHistoryOpen(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatHistory, {\n        chats: chatHistory,\n        activeChat: activeChat,\n        onChatSelect: handleChatSelect,\n        onDeleteChat: handleDeleteChat,\n        onClose: () => setIsHistoryOpen(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), isSettingsOpen && /*#__PURE__*/_jsxDEV(Settings, {\n      settings: settings,\n      onSettingChange: handleSettingChange,\n      onClose: () => setIsSettingsOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBot, \"ZvtPUnpuNYrYJzEf9b8SvTFf7/g=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","SendIcon","ImageIcon","TranslateIcon","AudiotrackIcon","AttachFileIcon","ChatIcon","MicIcon","StopIcon","VolumeUpIcon","VolumeOffIcon","SettingsIcon","MenuIcon","AddIcon","startListening","stopListening","speakText","stopSpeaking","Settings","ChatHistory","Navbar","loanMessages","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","defaultAvatar","ChatBot","_s","messages","setMessages","chatHistory","setChatHistory","activeChat","setActiveChat","isHistoryOpen","setIsHistoryOpen","inputMessage","setInputMessage","isTyping","setIsTyping","isListening","setIsListening","isSpeaking","setIsSpeaking","isSettingsOpen","setIsSettingsOpen","settings","setSettings","darkMode","language","autoSpeak","voiceSpeed","notifications","messagesEndRef","document","body","setAttribute","Notification","permission","requestPermission","showNotification","message","hidden","icon","handleSettingChange","key","value","prev","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","on","response","newMessage","text","sender","timestamp","Date","updateChatHistory","id","error","console","off","chatId","updatedMessages","map","chat","lastMessage","length","handleNewChat","handleSubmit","e","preventDefault","trim","category","detectCategory","newChat","now","toString","title","generateChatTitle","emit","lowerMessage","toLowerCase","includes","words","split","slice","join","handleChatSelect","handleDeleteChat","filter","handleVoiceInput","transcript","handleMessageSpeak","className","children","onNewChat","onToggleHistory","onOpenSettings","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","fontSize","ref","onSubmit","type","onChange","target","placeholder","disabled","chats","onChatSelect","onDeleteChat","onClose","onSettingChange","_c","$RefreshReg$"],"sources":["C:/Users/nitis/Desktop/chatbot/chatbot-app/client/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport SendIcon from '@mui/icons-material/Send';\nimport ImageIcon from '@mui/icons-material/Image';\nimport TranslateIcon from '@mui/icons-material/Translate';\nimport AudiotrackIcon from '@mui/icons-material/Audiotrack';\nimport AttachFileIcon from '@mui/icons-material/AttachFile';\nimport ChatIcon from '@mui/icons-material/Chat';\nimport MicIcon from '@mui/icons-material/Mic';\nimport StopIcon from '@mui/icons-material/Stop';\nimport VolumeUpIcon from '@mui/icons-material/VolumeUp';\nimport VolumeOffIcon from '@mui/icons-material/VolumeOff';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport AddIcon from '@mui/icons-material/Add';\nimport { startListening, stopListening, speakText, stopSpeaking } from '../services/aiService';\nimport Settings from './Settings';\nimport ChatHistory from './ChatHistory';\nimport Navbar from './Navbar';\nimport { loanMessages } from '../data/loanMessages';\nimport './ChatBot.css';\n\nconst socket = io('http://localhost:5000');\n\nconst defaultAvatar = 'https://ui-avatars.com/api/?background=random';\n\nfunction ChatBot() {\n  const [messages, setMessages] = useState([]);\n  const [chatHistory, setChatHistory] = useState(loanMessages);\n  const [activeChat, setActiveChat] = useState(null);\n  const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [settings, setSettings] = useState({\n    darkMode: false,\n    language: 'en-US',\n    autoSpeak: false,\n    voiceSpeed: 1,\n    notifications: false\n  });\n  const messagesEndRef = useRef(null);\n\n  // Apply dark mode\n  useEffect(() => {\n    document.body.setAttribute('data-theme', settings.darkMode ? 'dark' : 'light');\n  }, [settings.darkMode]);\n\n  // Request notification permission\n  useEffect(() => {\n    if (settings.notifications && Notification.permission !== 'granted') {\n      Notification.requestPermission();\n    }\n  }, [settings.notifications]);\n\n  const showNotification = (message) => {\n    if (settings.notifications && Notification.permission === 'granted' && document.hidden) {\n      new Notification('New Message', {\n        body: message,\n        icon: '/path/to/your/icon.png'\n      });\n    }\n  };\n\n  const handleSettingChange = (key, value) => {\n    if (key === 'clearHistory') {\n      setChatHistory([]);\n      setMessages([]);\n      setActiveChat(null);\n      return;\n    }\n\n    setSettings(prev => ({ ...prev, [key]: value }));\n\n    // Handle special cases\n    if (key === 'voiceSpeed' && isSpeaking) {\n      stopSpeaking();\n      setIsSpeaking(false);\n    }\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    socket.on('bot-response', (response) => {\n      const newMessage = { text: response, sender: 'bot', timestamp: new Date() };\n      setMessages(prev => [...prev, newMessage]);\n      \n      if (activeChat) {\n        updateChatHistory(activeChat.id, [...messages, newMessage]);\n      }\n\n      setIsTyping(false);\n\n      // Auto-speak the response if enabled\n      if (settings.autoSpeak) {\n        speakText(response);\n      }\n\n      if (settings.notifications && document.hidden) {\n        showNotification(response);\n      }\n    });\n\n    socket.on('error', (error) => {\n      console.error('Error:', error);\n      setIsTyping(false);\n    });\n\n    return () => {\n      socket.off('bot-response');\n      socket.off('error');\n      stopListening();\n      stopSpeaking();\n    };\n  }, [settings.autoSpeak, settings.notifications, messages, activeChat, showNotification]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const updateChatHistory = (chatId, updatedMessages) => {\n    setChatHistory(prev => prev.map(chat => {\n      if (chat.id === chatId) {\n        return {\n          ...chat,\n          messages: updatedMessages,\n          lastMessage: updatedMessages[updatedMessages.length - 1].text\n        };\n      }\n      return chat;\n    }));\n  };\n\n  const handleNewChat = () => {\n    setActiveChat(null);\n    setMessages([]);\n    setInputMessage('');\n    setIsHistoryOpen(false);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputMessage.trim() === '') return;\n\n    const newMessage = {\n      text: inputMessage,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    \n    setMessages(prev => [...prev, newMessage]);\n    \n    if (activeChat) {\n      // Update existing chat\n      const updatedMessages = [...messages, newMessage];\n      updateChatHistory(activeChat.id, updatedMessages);\n    } else {\n      // Create new chat with proper category detection\n      const category = detectCategory(inputMessage);\n      const newChat = {\n        id: Date.now().toString(),\n        title: generateChatTitle(inputMessage),\n        category,\n        messages: [newMessage],\n        timestamp: new Date(),\n        lastMessage: inputMessage\n      };\n      setChatHistory(prev => [newChat, ...prev]);\n      setActiveChat(newChat);\n    }\n\n    setIsTyping(true);\n    socket.emit('user-message', inputMessage);\n    setInputMessage('');\n  };\n\n  const detectCategory = (message) => {\n    const lowerMessage = message.toLowerCase();\n    if (lowerMessage.includes('property') || lowerMessage.includes('land')) return 'property';\n    if (lowerMessage.includes('home') || lowerMessage.includes('house')) return 'home';\n    if (lowerMessage.includes('shop') || lowerMessage.includes('store')) return 'shop';\n    return 'business';\n  };\n\n  const generateChatTitle = (message) => {\n    // Generate a meaningful title from the first message\n    const words = message.split(' ');\n    const title = words.slice(0, 5).join(' ');\n    return title.length < message.length ? `${title}...` : title;\n  };\n\n  const handleChatSelect = (chat) => {\n    setActiveChat(chat);\n    setMessages(chat.messages);\n    setIsHistoryOpen(false);\n  };\n\n  const handleDeleteChat = (chatId) => {\n    setChatHistory(prev => prev.filter(chat => chat.id !== chatId));\n    if (activeChat?.id === chatId) {\n      setActiveChat(null);\n      setMessages([]);\n    }\n  };\n\n  const handleVoiceInput = () => {\n    if (isListening) {\n      stopListening();\n      setIsListening(false);\n    } else {\n      setIsListening(true);\n      startListening(\n        (transcript) => {\n          setInputMessage(transcript);\n        },\n        (error) => {\n          console.error('Speech recognition error:', error);\n          setIsListening(false);\n        }\n      );\n    }\n  };\n\n  const handleMessageSpeak = (text) => {\n    if (isSpeaking) {\n      stopSpeaking();\n      setIsSpeaking(false);\n    } else {\n      speakText(text);\n      setIsSpeaking(true);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <Navbar \n        onNewChat={handleNewChat}\n        onToggleHistory={() => setIsHistoryOpen(!isHistoryOpen)}\n        onOpenSettings={() => setIsSettingsOpen(true)}\n      />\n      \n      <div className={`main-content ${isHistoryOpen ? 'shifted' : ''}`}>\n        <div className=\"messages-container\">\n          {messages.map((message, index) => (\n            <div\n              key={index}\n              className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}\n            >\n              {message.text}\n              {message.sender === 'bot' && (\n                <button\n                  className=\"speak-button\"\n                  onClick={() => handleMessageSpeak(message.text)}\n                >\n                  {isSpeaking ? <StopIcon fontSize=\"small\" /> : <VolumeUpIcon fontSize=\"small\" />}\n                </button>\n              )}\n            </div>\n          ))}\n          {isTyping && (\n            <div className=\"typing-indicator\">\n              AI is typing...\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        <form className=\"input-form\" onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"message-input\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            placeholder=\"Type your message here...\"\n            disabled={isTyping}\n          />\n          <button\n            type=\"button\"\n            className=\"voice-button\"\n            onClick={handleVoiceInput}\n            disabled={isTyping}\n          >\n            {isListening ? <StopIcon /> : <MicIcon />}\n          </button>\n          <button\n            type=\"submit\"\n            className=\"send-button\"\n            disabled={!inputMessage.trim() || isTyping}\n          >\n            <SendIcon />\n          </button>\n        </form>\n      </div>\n\n      {isHistoryOpen && (\n        <>\n          <div className=\"history-overlay\" onClick={() => setIsHistoryOpen(false)} />\n          <ChatHistory\n            chats={chatHistory}\n            activeChat={activeChat}\n            onChatSelect={handleChatSelect}\n            onDeleteChat={handleDeleteChat}\n            onClose={() => setIsHistoryOpen(false)}\n          />\n        </>\n      )}\n\n      {isSettingsOpen && (\n        <Settings\n          settings={settings}\n          onSettingChange={handleSettingChange}\n          onClose={() => setIsSettingsOpen(false)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default ChatBot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}